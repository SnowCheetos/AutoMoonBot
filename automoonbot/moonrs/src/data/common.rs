use crate::data::*;

#[derive(Debug, Clone, Copy)]
pub struct IncomeStatement {
    pub(super) timestamp: Instant,
    pub(super) duration: Duration,
    pub(super) gross_profit: f64,
    pub(super) total_revenue: f64,
    pub(super) cost_of_revenue: f64,
    pub(super) cost_of_goods_and_services_sold: f64,
    pub(super) operating_income: f64,
    pub(super) selling_general_and_administrative: f64,
    pub(super) research_and_development: f64,
    pub(super) operating_expenses: f64,
    pub(super) investment_income_net: f64,
    pub(super) net_interest_income: f64,
    pub(super) interest_income: f64,
    pub(super) interest_expense: f64,
    pub(super) non_interest_income: f64,
    pub(super) other_non_operating_income: f64,
    pub(super) depreciation: f64,
    pub(super) depreciation_and_amortization: f64,
    pub(super) income_before_tax: f64,
    pub(super) income_tax_expense: f64,
    pub(super) interest_and_debt_expense: f64,
    pub(super) net_income_from_continuing_operations: f64,
    pub(super) comprehensive_income_net_of_tax: f64,
    pub(super) ebit: f64,
    pub(super) ebitda: f64,
    pub(super) net_income: f64,
}

#[derive(Debug, Clone, Copy)]
pub struct BalanceSheet {
    pub(super) timestamp: Instant,
    pub(super) duration: Duration,
    pub(super) total_assets: f64,
    pub(super) total_current_assets: f64,
    pub(super) cash_and_cash_equivalents_at_carrying_value: f64,
    pub(super) cash_and_short_term_investments: f64,
    pub(super) inventory: f64,
    pub(super) current_net_receivables: f64,
    pub(super) total_non_current_assets: f64,
    pub(super) property_plant_equipment: f64,
    pub(super) accumulated_depreciation_amortization_ppe: f64,
    pub(super) intangible_assets: f64,
    pub(super) intangible_assets_excluding_goodwill: f64,
    pub(super) goodwill: f64,
    pub(super) investments: f64,
    pub(super) long_term_investments: f64,
    pub(super) short_term_investments: f64,
    pub(super) other_current_assets: f64,
    pub(super) other_non_current_assets: f64,
    pub(super) total_liabilities: f64,
    pub(super) total_current_liabilities: f64,
    pub(super) current_accounts_payable: f64,
    pub(super) deferred_revenue: f64,
    pub(super) current_debt: f64,
    pub(super) short_term_debt: f64,
    pub(super) total_non_current_liabilities: f64,
    pub(super) capital_lease_obligations: f64,
    pub(super) long_term_debt: f64,
    pub(super) current_long_term_debt: f64,
    pub(super) long_term_debt_noncurrent: f64,
    pub(super) short_long_term_debt_total: f64,
    pub(super) other_current_liabilities: f64,
    pub(super) other_non_current_liabilities: f64,
    pub(super) total_shareholder_equity: f64,
    pub(super) treasury_stock: f64,
    pub(super) retained_earnings: f64,
    pub(super) common_stock: f64,
    pub(super) common_stock_shares_outstanding: f64,
}

#[derive(Debug, Clone, Copy)]
pub struct CashFlow {
    pub(super) timestamp: Instant,
    pub(super) duration: Duration,
    pub(super) operating_cashflow: f64,
    pub(super) payments_for_operating_activities: f64,
    pub(super) proceeds_from_operating_activities: f64,
    pub(super) change_in_operating_liabilities: f64,
    pub(super) change_in_operating_assets: f64,
    pub(super) depreciation_depletion_and_amortization: f64,
    pub(super) capital_expenditures: f64,
    pub(super) change_in_receivables: f64,
    pub(super) change_in_inventory: f64,
    pub(super) profit_loss: f64,
    pub(super) cashflow_from_investment: f64,
    pub(super) cashflow_from_financing: f64,
    pub(super) proceeds_from_repayments_of_short_term_debt: f64,
    pub(super) payments_for_repurchase_of_common_stock: f64,
    pub(super) payments_for_repurchase_of_equity: f64,
    pub(super) payments_for_repurchase_of_preferred_stock: f64,
    pub(super) dividend_payout: f64,
    pub(super) dividend_payout_common_stock: f64,
    pub(super) dividend_payout_preferred_stock: f64,
    pub(super) proceeds_from_issuance_of_common_stock: f64,
    pub(super) proceeds_from_issuance_of_long_term_debt_and_capital_securities_net: f64,
    pub(super) proceeds_from_issuance_of_preferred_stock: f64,
    pub(super) proceeds_from_repurchase_of_equity: f64,
    pub(super) proceeds_from_sale_of_treasury_stock: f64,
    pub(super) change_in_cash_and_cash_equivalents: f64,
    pub(super) change_in_exchange_rate: f64,
    pub(super) net_income: f64,
}

#[derive(Debug, Clone, Copy)]
pub struct Earnings {
    pub(super) timestamp: Instant,
    pub(super) duration: Duration,
    pub(super) after_hours: bool,
    pub(super) reported_eps: f64,
    pub(super) estimated_eps: f64,
    pub(super) surprise: f64,
}

#[derive(Debug, Clone, Copy)]
pub struct PriceAggregate {
    pub(super) timestamp: Instant,
    pub(super) duration: Duration,
    pub(super) adjusted: bool,
    pub(super) open: f64,
    pub(super) high: f64,
    pub(super) low: f64,
    pub(super) close: f64,
    pub(super) volume: f64,
}

#[derive(Debug, Clone, Copy)]
pub struct OptionsAggregate {
    pub(super) timestamp: Instant,
    pub(super) duration: Duration,
    pub(super) last: f64,
    pub(super) mark: f64,
    pub(super) bid: f64,
    pub(super) bid_size: f64,
    pub(super) ask: f64,
    pub(super) ask_size: f64,
    pub(super) volume: f64,
    pub(super) open_interest: f64,
    pub(super) implied_volatility: f64,
    pub(super) delta: f64,
    pub(super) gamma: f64,
    pub(super) theta: f64,
    pub(super) vega: f64,
    pub(super) rho: f64,
}

impl IncomeStatement {
    pub fn new(
        timestamp: Instant,
        duration: Duration,
        gross_profit: f64,
        total_revenue: f64,
        cost_of_revenue: f64,
        cost_of_goods_and_services_sold: f64,
        operating_income: f64,
        selling_general_and_administrative: f64,
        research_and_development: f64,
        operating_expenses: f64,
        investment_income_net: f64,
        net_interest_income: f64,
        interest_income: f64,
        interest_expense: f64,
        non_interest_income: f64,
        other_non_operating_income: f64,
        depreciation: f64,
        depreciation_and_amortization: f64,
        income_before_tax: f64,
        income_tax_expense: f64,
        interest_and_debt_expense: f64,
        net_income_from_continuing_operations: f64,
        comprehensive_income_net_of_tax: f64,
        ebit: f64,
        ebitda: f64,
        net_income: f64,
    ) -> Self {
        IncomeStatement {
            timestamp,
            duration,
            gross_profit,
            total_revenue,
            cost_of_revenue,
            cost_of_goods_and_services_sold,
            operating_income,
            selling_general_and_administrative,
            research_and_development,
            operating_expenses,
            investment_income_net,
            net_interest_income,
            interest_income,
            interest_expense,
            non_interest_income,
            other_non_operating_income,
            depreciation,
            depreciation_and_amortization,
            income_before_tax,
            income_tax_expense,
            interest_and_debt_expense,
            net_income_from_continuing_operations,
            comprehensive_income_net_of_tax,
            ebit,
            ebitda,
            net_income,
        }
    }
}

impl BalanceSheet {
    pub fn new(
        timestamp: Instant,
        duration: Duration,
        total_assets: f64,
        total_current_assets: f64,
        cash_and_cash_equivalents_at_carrying_value: f64,
        cash_and_short_term_investments: f64,
        inventory: f64,
        current_net_receivables: f64,
        total_non_current_assets: f64,
        property_plant_equipment: f64,
        accumulated_depreciation_amortization_ppe: f64,
        intangible_assets: f64,
        intangible_assets_excluding_goodwill: f64,
        goodwill: f64,
        investments: f64,
        long_term_investments: f64,
        short_term_investments: f64,
        other_current_assets: f64,
        other_non_current_assets: f64,
        total_liabilities: f64,
        total_current_liabilities: f64,
        current_accounts_payable: f64,
        deferred_revenue: f64,
        current_debt: f64,
        short_term_debt: f64,
        total_non_current_liabilities: f64,
        capital_lease_obligations: f64,
        long_term_debt: f64,
        current_long_term_debt: f64,
        long_term_debt_noncurrent: f64,
        short_long_term_debt_total: f64,
        other_current_liabilities: f64,
        other_non_current_liabilities: f64,
        total_shareholder_equity: f64,
        treasury_stock: f64,
        retained_earnings: f64,
        common_stock: f64,
        common_stock_shares_outstanding: f64,
    ) -> Self {
        BalanceSheet {
            timestamp,
            duration,
            total_assets,
            total_current_assets,
            cash_and_cash_equivalents_at_carrying_value,
            cash_and_short_term_investments,
            inventory,
            current_net_receivables,
            total_non_current_assets,
            property_plant_equipment,
            accumulated_depreciation_amortization_ppe,
            intangible_assets,
            intangible_assets_excluding_goodwill,
            goodwill,
            investments,
            long_term_investments,
            short_term_investments,
            other_current_assets,
            other_non_current_assets,
            total_liabilities,
            total_current_liabilities,
            current_accounts_payable,
            deferred_revenue,
            current_debt,
            short_term_debt,
            total_non_current_liabilities,
            capital_lease_obligations,
            long_term_debt,
            current_long_term_debt,
            long_term_debt_noncurrent,
            short_long_term_debt_total,
            other_current_liabilities,
            other_non_current_liabilities,
            total_shareholder_equity,
            treasury_stock,
            retained_earnings,
            common_stock,
            common_stock_shares_outstanding,
        }
    }
}

impl CashFlow {
    pub fn new(
        timestamp: Instant,
        duration: Duration,
        operating_cashflow: f64,
        payments_for_operating_activities: f64,
        proceeds_from_operating_activities: f64,
        change_in_operating_liabilities: f64,
        change_in_operating_assets: f64,
        depreciation_depletion_and_amortization: f64,
        capital_expenditures: f64,
        change_in_receivables: f64,
        change_in_inventory: f64,
        profit_loss: f64,
        cashflow_from_investment: f64,
        cashflow_from_financing: f64,
        proceeds_from_repayments_of_short_term_debt: f64,
        payments_for_repurchase_of_common_stock: f64,
        payments_for_repurchase_of_equity: f64,
        payments_for_repurchase_of_preferred_stock: f64,
        dividend_payout: f64,
        dividend_payout_common_stock: f64,
        dividend_payout_preferred_stock: f64,
        proceeds_from_issuance_of_common_stock: f64,
        proceeds_from_issuance_of_long_term_debt_and_capital_securities_net: f64,
        proceeds_from_issuance_of_preferred_stock: f64,
        proceeds_from_repurchase_of_equity: f64,
        proceeds_from_sale_of_treasury_stock: f64,
        change_in_cash_and_cash_equivalents: f64,
        change_in_exchange_rate: f64,
        net_income: f64,
    ) -> Self {
        CashFlow {
            timestamp,
            duration,
            operating_cashflow,
            payments_for_operating_activities,
            proceeds_from_operating_activities,
            change_in_operating_liabilities,
            change_in_operating_assets,
            depreciation_depletion_and_amortization,
            capital_expenditures,
            change_in_receivables,
            change_in_inventory,
            profit_loss,
            cashflow_from_investment,
            cashflow_from_financing,
            proceeds_from_repayments_of_short_term_debt,
            payments_for_repurchase_of_common_stock,
            payments_for_repurchase_of_equity,
            payments_for_repurchase_of_preferred_stock,
            dividend_payout,
            dividend_payout_common_stock,
            dividend_payout_preferred_stock,
            proceeds_from_issuance_of_common_stock,
            proceeds_from_issuance_of_long_term_debt_and_capital_securities_net,
            proceeds_from_issuance_of_preferred_stock,
            proceeds_from_repurchase_of_equity,
            proceeds_from_sale_of_treasury_stock,
            change_in_cash_and_cash_equivalents,
            change_in_exchange_rate,
            net_income,
        }
    }
}

impl Earnings {
    pub fn new(
        timestamp: Instant,
        duration: Duration,
        after_hours: bool,
        reported_eps: f64,
        estimated_eps: f64,
        surprise: f64,
    ) -> Self {
        Earnings {
            timestamp,
            duration,
            after_hours,
            reported_eps,
            estimated_eps,
            surprise,
        }
    }

    pub fn after_hours(&self) -> bool {
        self.after_hours
    }
}

impl PriceAggregate {
    pub fn new(
        timestamp: Instant,
        duration: Duration,
        adjusted: bool,
        open: f64,
        high: f64,
        low: f64,
        close: f64,
        volume: f64,
    ) -> Self {
        PriceAggregate {
            timestamp,
            duration,
            adjusted,
            open,
            high,
            low,
            close,
            volume,
        }
    }

    pub fn adjusted(&self) -> bool {
        self.adjusted
    }
}

impl OptionsAggregate {
    pub fn new(
        timestamp: Instant,
        duration: Duration,
        last: f64,
        mark: f64,
        bid: f64,
        bid_size: f64,
        ask: f64,
        ask_size: f64,
        volume: f64,
        open_interest: f64,
        implied_volatility: f64,
        delta: f64,
        gamma: f64,
        theta: f64,
        vega: f64,
        rho: f64,
    ) -> Self {
        OptionsAggregate {
            timestamp,
            duration,
            last,
            mark,
            bid,
            bid_size,
            ask,
            ask_size,
            volume,
            open_interest,
            implied_volatility,
            delta,
            gamma,
            theta,
            vega,
            rho,
        }
    }
}
